/**
 * Regional Championship 2024 - Skill 17 - Web Technologies
 * Frontend
 *
 * This file contains the unit tests performed on the frontend task.
 * You may look at the test cases but not modify them.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 */

import { faker } from '@faker-js/faker';
import { getMoveData, readGameFromPGN } from '../../src/util.js';
import { GAME_OF_THE_CENTURY, UNEVEN_MOVES } from '../fixtures/games.js';

describe('Util', () => {
    describe('getMoveData', () => {
        const num = faker.number.int({ min: 1, max: 50 });
        const color = faker.helpers.arrayElement(['w', 'b']);
        const testMove = (phrase, move) =>
            `${phrase}: ${
                color === 'w' ? 'white' : 'black'
            } plays ${num}. ${move}`;

        it(testMove('can read a pawn move', 'e4'), () => {
            const move = getMoveData(num, color, 'e4');

            expect(move.num).to.equal(num);
            expect(move.color).to.equal(color);
            expect(move.piece).to.equal('P');
            expect(move.fileIdentifier).to.be.undefined;
            expect(move.rankIdentifier).to.be.undefined;
            expect(move.targetSquare).to.equal('e4');
            expect(move.capture).to.be.false;
            expect(move.check).to.be.false;
            expect(move.checkmate).to.be.false;
        });

        it(testMove('can read a knight move', 'Nf3'), () => {
            const move = getMoveData(num, color, 'Nf3');

            expect(move.num).to.equal(num);
            expect(move.color).to.equal(color);
            expect(move.piece).to.equal('N');
            expect(move.fileIdentifier).to.be.undefined;
            expect(move.rankIdentifier).to.be.undefined;
            expect(move.targetSquare).to.equal('f3');
            expect(move.capture).to.be.false;
            expect(move.check).to.be.false;
            expect(move.checkmate).to.be.false;
        });

        it(testMove('can read a knight move with identifier', 'N1f3'), () => {
            const move = getMoveData(num, color, 'N1f3');

            expect(move.num).to.equal(num);
            expect(move.color).to.equal(color);
            expect(move.piece).to.equal('N');
            expect(move.fileIdentifier).to.be.undefined;
            expect(move.rankIdentifier).to.equal(1);
            expect(move.targetSquare).to.equal('f3');
            expect(move.capture).to.be.false;
            expect(move.check).to.be.false;
            expect(move.checkmate).to.be.false;
        });

        it(testMove('can read a bishop move', 'Bg5'), () => {
            const move = getMoveData(num, color, 'Bg5');

            expect(move.num).to.equal(num);
            expect(move.color).to.equal(color);
            expect(move.piece).to.equal('B');
            expect(move.fileIdentifier).to.be.undefined;
            expect(move.rankIdentifier).to.be.undefined;
            expect(move.targetSquare).to.equal('g5');
            expect(move.capture).to.be.false;
            expect(move.check).to.be.false;
            expect(move.checkmate).to.be.false;
        });

        it(testMove('can read a rook move', 'Rh3'), () => {
            const move = getMoveData(num, color, 'Rh3');

            expect(move.num).to.equal(num);
            expect(move.color).to.equal(color);
            expect(move.piece).to.equal('R');
            expect(move.fileIdentifier).to.be.undefined;
            expect(move.rankIdentifier).to.be.undefined;
            expect(move.targetSquare).to.equal('h3');
            expect(move.capture).to.be.false;
            expect(move.check).to.be.false;
            expect(move.checkmate).to.be.false;
        });

        it(testMove('can read a queen move', 'Qd5'), () => {
            const move = getMoveData(num, color, 'Qd5');

            expect(move.num).to.equal(num);
            expect(move.color).to.equal(color);
            expect(move.piece).to.equal('Q');
            expect(move.fileIdentifier).to.be.undefined;
            expect(move.rankIdentifier).to.be.undefined;
            expect(move.targetSquare).to.equal('d5');
            expect(move.capture).to.be.false;
            expect(move.check).to.be.false;
            expect(move.checkmate).to.be.false;
        });

        it(
            testMove(
                'can read a queen move with file and rank identifier',
                'Qh4e1'
            ),
            () => {
                const move = getMoveData(num, color, 'Qh4e1');

                expect(move.num).to.equal(num);
                expect(move.color).to.equal(color);
                expect(move.piece).to.equal('Q');
                expect(move.fileIdentifier).to.equal('h');
                expect(move.rankIdentifier).to.equal(4);
                expect(move.targetSquare).to.equal('e1');
                expect(move.capture).to.be.false;
                expect(move.check).to.be.false;
                expect(move.checkmate).to.be.false;
            }
        );

        it(testMove('can read a king move', 'Ke2'), () => {
            const move = getMoveData(num, color, 'Ke2');

            expect(move.num).to.equal(num);
            expect(move.color).to.equal(color);
            expect(move.piece).to.equal('K');
            expect(move.fileIdentifier).to.be.undefined;
            expect(move.rankIdentifier).to.be.undefined;
            expect(move.targetSquare).to.equal('e2');
            expect(move.capture).to.be.false;
            expect(move.check).to.be.false;
            expect(move.checkmate).to.be.false;
        });

        it(testMove('can read a capturing pawn move', 'cxd4'), () => {
            const move = getMoveData(num, color, 'cxd4');

            expect(move.num).to.equal(num);
            expect(move.color).to.equal(color);
            expect(move.piece).to.equal('P');
            expect(move.fileIdentifier).to.equal('c');
            expect(move.rankIdentifier).to.be.undefined;
            expect(move.targetSquare).to.equal('d4');
            expect(move.capture).to.be.true;
            expect(move.check).to.be.false;
            expect(move.checkmate).to.be.false;
        });

        it(testMove('can read a capturing bishop move', 'Bxb5'), () => {
            const move = getMoveData(num, color, 'Bxb5');

            expect(move.num).to.equal(num);
            expect(move.color).to.equal(color);
            expect(move.piece).to.equal('B');
            expect(move.fileIdentifier).to.be.undefined;
            expect(move.rankIdentifier).to.be.undefined;
            expect(move.targetSquare).to.equal('b5');
            expect(move.capture).to.be.true;
            expect(move.check).to.be.false;
            expect(move.checkmate).to.be.false;
        });

        it(testMove('can read a checking rook move', 'Re1+'), () => {
            const move = getMoveData(num, color, 'Re1+');

            expect(move.num).to.equal(num);
            expect(move.color).to.equal(color);
            expect(move.piece).to.equal('R');
            expect(move.fileIdentifier).to.be.undefined;
            expect(move.rankIdentifier).to.be.undefined;
            expect(move.targetSquare).to.equal('e1');
            expect(move.capture).to.be.false;
            expect(move.check).to.be.true;
            expect(move.checkmate).to.be.false;
        });

        it(
            testMove('can read a capturing and checking knight move', 'Nxc7+'),
            () => {
                const move = getMoveData(num, color, 'Nxc7+');

                expect(move.num).to.equal(num);
                expect(move.color).to.equal(color);
                expect(move.piece).to.equal('N');
                expect(move.fileIdentifier).to.be.undefined;
                expect(move.rankIdentifier).to.be.undefined;
                expect(move.targetSquare).to.equal('c7');
                expect(move.capture).to.be.true;
                expect(move.check).to.be.true;
                expect(move.checkmate).to.be.false;
            }
        );

        it(
            testMove(
                'can read a capturing and checkmating queen move',
                'Qxf7#'
            ),
            () => {
                const move = getMoveData(num, color, 'Qxf7#');

                expect(move.num).to.equal(num);
                expect(move.color).to.equal(color);
                expect(move.piece).to.equal('Q');
                expect(move.fileIdentifier).to.be.undefined;
                expect(move.rankIdentifier).to.be.undefined;
                expect(move.targetSquare).to.equal('f7');
                expect(move.capture).to.be.true;
                expect(move.check).to.be.false;
                expect(move.checkmate).to.be.true;
            }
        );

        it(testMove('can read a short castle move', 'O-O'), () => {
            const move = getMoveData(num, color, 'O-O');

            expect(move.num).to.equal(num);
            expect(move.color).to.equal(color);
            expect(move.castle).to.equal('short');
        });

        it(testMove('can read a long castle move', 'O-O-O'), () => {
            const move = getMoveData(num, color, 'O-O-O');

            expect(move.num).to.equal(num);
            expect(move.color).to.equal(color);
            expect(move.castle).to.equal('long');
        });
    });

    describe('readPGN', () => {
        it('returns an object', () => {
            expect(typeof readGameFromPGN(GAME_OF_THE_CENTURY)).to.equal(
                'object'
            );
        });

        it('contains the white player', () => {
            expect((readGameFromPGN(GAME_OF_THE_CENTURY).str).White).to.equal(
                'Donald Byrne'
            );
        });

        it('contains the black player', () => {
            expect(readGameFromPGN(GAME_OF_THE_CENTURY).str.Black).to.equal(
                'Robert James Fischer'
            );
        });

        it('contains the result', () => {
            expect(readGameFromPGN(GAME_OF_THE_CENTURY).str.Result).to.equal('0-1');
        });

        it('contains the (valid) date', () => {
            expect(readGameFromPGN(GAME_OF_THE_CENTURY).str.Black).to.equal(
                'Robert James Fischer'
            );
            const date = (readGameFromPGN(GAME_OF_THE_CENTURY).str.Date);
            console.log(date);
            expect(date instanceof Date).to.be.true;
            expect(isNaN(date)).to.be.false;
            expect(date.getTime()).to.equal(new Date('1956.10.17').getTime());
        });

        it('contains the moves', () => {
            expect(readGameFromPGN(GAME_OF_THE_CENTURY).moves)
                .to.be.an('array')
                .of.length(82);
        });

        it('handles game ending move by white', () => {
            const [move1, move2, move3, ...rest] =
                readGameFromPGN(UNEVEN_MOVES).moves;

            // move 1
            expect(move1.num).to.equal(1);
            expect(move1.color).to.equal('w');
            expect(move1.piece).to.equal('P');
            expect(move1.targetSquare).to.equal('e4');
            expect(move1.capture).to.equal(false);
            expect(move1.check).to.equal(false);
            expect(move1.checkmate).to.equal(false);

            // move 2
            expect(move2.num).to.equal(1);
            expect(move2.color).to.equal('b');
            expect(move2.piece).to.equal('P');
            expect(move2.targetSquare).to.equal('e5');
            expect(move2.capture).to.equal(false);
            expect(move2.check).to.equal(false);
            expect(move2.checkmate).to.equal(false);

            // move 3
            expect(move3.num).to.equal(2);
            expect(move3.color).to.equal('w');
            expect(move3.piece).to.equal('N');
            expect(move3.targetSquare).to.equal('f3');
            expect(move3.capture).to.equal(false);
            expect(move3.check).to.equal(false);
            expect(move3.checkmate).to.equal(false);

            // must not have any other moves
            expect(rest).to.be.an('array').of.length(0);
        });
    });
});

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mocha = _interopRequireDefault(require("mocha"));

var _taskConfig = _interopRequireDefault(require("@skills17/task-config"));

var _testResultPrinter = _interopRequireDefault(require("@skills17/test-result-printer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-line import/no-extraneous-dependencies
const {
  EVENT_TEST_END
} = _mocha.default.Runner.constants;

class ConsoleReporter {
  static displayPoints = true;

  constructor(runner) {
    // cypress starts a completely new test run per spec file.
    // so we have to store the test run in a static variable and listen on the `beforeExit` event
    // of the process to output the result before the process finishes.
    if (!ConsoleReporter.testRun) {
      const config = new _taskConfig.default();
      config.loadFromFileSync();
      ConsoleReporter.testRun = config.createTestRun();
      ConsoleReporter.displayPoints = config.arePointsDisplayed();
      process.on('exit', this.onRunEnd.bind(this));
    }

    runner.on(EVENT_TEST_END, this.onTestEnd.bind(this));
  } // eslint-disable-next-line class-methods-use-this


  getTestRun() {
    return ConsoleReporter.testRun;
  }

  onTestEnd(test) {
    const titlePath = test.titlePath();
    const titlePathWithoutExtra = titlePath.filter(title => title !== 'extra' && title !== 'Extra');
    this.getTestRun().recordTest(titlePathWithoutExtra.join(' > '), titlePathWithoutExtra.slice(1).join(' > '), titlePath.includes('extra') || titlePath.includes('Extra'), test.isPassed());
  }

  onRunEnd() {
    const printer = new _testResultPrinter.default(this.getTestRun());
    console.log(); // eslint-disable-line no-console

    printer.print({
      printFooter: process.env.CYPRESS_QUIET !== '1',
      printPoints: ConsoleReporter.displayPoints
    });
  }

}

exports.default = ConsoleReporter;
module.exports = ConsoleReporter;
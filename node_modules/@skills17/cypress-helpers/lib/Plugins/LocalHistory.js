"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = storeLocalHistory;
exports.storeTestRun = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _uniqid = _interopRequireDefault(require("uniqid"));

var _taskConfig = _interopRequireDefault(require("@skills17/task-config"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Store a test run in a history file
 */
const storeTestRun = (config, testRun) => {
  const historyDir = _path.default.resolve(config.getProjectRoot(), '.history');

  const historyFile = _path.default.resolve(historyDir, `${(0, _uniqid.default)()}.json`); // create history dir if it doesn't exist


  if (!_fs.default.existsSync(historyDir)) {
    _fs.default.mkdirSync(historyDir);
  } // write history file


  _fs.default.writeFileSync(historyFile, JSON.stringify({
    time: Math.round(new Date().getTime() / 1000),
    ...testRun.toJSON()
  }, undefined, 2));
};
/**
 * Record a test run and store it in a history file
 */


exports.storeTestRun = storeTestRun;

function storeLocalHistory(testInfo) {
  // load task config
  const config = new _taskConfig.default();
  config.loadFromFileSync();
  const testRun = config.createTestRun(); // exit if local history is disabled

  if (!config.isLocalHistoryEnabled()) {
    return null;
  } // record test run


  testInfo.forEach(test => {
    testRun.recordTest(...test);
  });
  storeTestRun(config, testRun);
  return null;
}
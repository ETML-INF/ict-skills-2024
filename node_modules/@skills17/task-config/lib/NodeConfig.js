"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireWildcard(require("fs"));

var _findUp = _interopRequireDefault(require("find-up"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var _ajv = _interopRequireDefault(require("ajv"));

var _Config = _interopRequireDefault(require("./Config"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class NodeConfig extends _Config.default {
  /**
   * Detect the path of the config.yaml file.
   * First, try it from the current file.
   * If that can't be found which is the case when installed using a symlink, try it from the cwd.
   */
  static async detectPath() {
    let configPath = await (0, _findUp.default)('config.yaml', {
      cwd: __dirname
    });

    if (!configPath) {
      configPath = await (0, _findUp.default)('config.yaml', {
        cwd: process.cwd()
      });
    }

    if (!configPath) {
      throw new Error('Config file does not exist');
    }

    return configPath;
  }
  /**
   * Detect the path of the config.yaml file synchronously.
   * First, try it from the current file.
   * If that can't be found which is the case when installed using a symlink, try it from the cwd.
   */


  static detectPathSync() {
    let configPath = _findUp.default.sync('config.yaml', {
      cwd: __dirname
    });

    if (!configPath) {
      configPath = _findUp.default.sync('config.yaml', {
        cwd: process.cwd()
      });
    }

    if (!configPath) {
      throw new Error('Config file does not exist');
    }

    return configPath;
  }
  /**
   * Load the configuration from a file
   *
   * @param configPath Path of the config.yaml file, will be determined automatically if omitted
   */


  async loadFromFile(configPath) {
    this.configPath = configPath ?? (await NodeConfig.detectPath()); // load yaml file

    const fileContent = await _fs.promises.readFile(this.configPath);

    const config = _jsYaml.default.load(fileContent.toString());

    this.validateSchema(config);
    this.load(config);
  }
  /**
   * Load the configuration from a file synchronously
   *
   * @param configPath Path of the config.yaml file, will be determined automatically if omitted
   */


  loadFromFileSync(configPath) {
    this.configPath = configPath ?? NodeConfig.detectPathSync(); // load yaml file

    const fileContent = _fs.default.readFileSync(this.configPath);

    const config = _jsYaml.default.load(fileContent.toString());

    this.validateSchema(config);
    this.load(config);
  }

  getProjectRoot() {
    if (!this.configPath) {
      throw new Error('getProjectRoot() can only be called on a loaded config instance');
    }

    return _path.default.dirname(this.configPath);
  }
  /**
   * Validate the config against the schema.
   *
   * @param config Config object
   */


  validateSchema(config) {
    // eslint-disable-line
    const schemaPath = _path.default.join(__dirname, '..', 'config.schema.json');

    const schema = JSON.parse(_fs.default.readFileSync(schemaPath).toString());
    const validator = new _ajv.default({
      allErrors: true,
      strict: true,
      strictSchema: true,
      strictNumbers: true
    });
    const validate = validator.compile(schema);

    if (!validate(config)) {
      throw new Error(`config.yaml did not pass validation: ${validator.errorsText(validate.errors)}`);
    }
  }

}

exports.default = NodeConfig;
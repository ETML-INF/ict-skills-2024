import Override from './Override';
import Strategy from './Strategy';
import Test from './Test';
export default class Group {
    private match;
    private defaultPoints;
    private strategy;
    private displayName?;
    private maxPoints?;
    private pattern;
    private extraTests;
    private tests;
    private overrides;
    constructor(match: string, defaultPoints: number, strategy: Strategy, displayName?: string | undefined, maxPoints?: number | undefined);
    /**
     * Add a new normal test to this group
     *
     * @param name Test name
     * @param successful Whether the test was successful or not
     */
    private addNormalTest;
    /**
     * Add a new extra test to this group
     *
     * @param name Test name
     * @param successful Whether the test was successful or not
     */
    private addExtraTest;
    /**
     * Get the override for a specific test if it exists
     *
     * @param name Test name
     */
    private getOverrideForTest;
    /**
     * Rounds points up to two decimal places
     *
     * @param points Points
     * @returns
     */
    private roundPoints;
    /**
     * Check if a test matches this group
     *
     * @param match Test name to check
     */
    matches(match: string): boolean;
    /**
     * Add a new test to this group
     *
     * @param name Test name
     * @param extra Whether it is an extra test or not
     * @param successful Whether the test was successful or not
     */
    addTest(name: string, extra: boolean, successful: boolean): void;
    /**
     * Add a new test override
     *
     * @param override Test override
     */
    addOverride(override: Override): void;
    /**
     * Calculates the scored points
     */
    getPoints(): number;
    /**
     * Calculates the maximum possible points
     */
    getMaxPoints(): number;
    /**
     * Returns the tests that do not have an extra test
     */
    getMissingExtraTests(): Test[];
    /**
     * Returns the name of extra tests that do not have a normal test
     */
    getMissingNormalTests(): string[];
    /**
     * Returns whether this group has at least one normal or extra test
     */
    hasTests(): boolean;
    getDefaultPoints(): number;
    getStrategy(): Strategy;
    getDisplayName(): string;
    getTests(): Test[];
    getPattern(): string;
    requiresManualCheck(): boolean;
    toJSON(): Record<string, unknown>;
}

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _crossSpawn = _interopRequireDefault(require("cross-spawn"));

var _npmRunPath = _interopRequireDefault(require("npm-run-path"));

var _taskConfig = _interopRequireDefault(require("@skills17/task-config"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _util = _interopRequireDefault(require("util"));

var _glob = _interopRequireDefault(require("glob"));

var _testResultPrinter = _interopRequireDefault(require("@skills17/test-result-printer"));

var _ReportReader = _interopRequireDefault(require("./ReportReader"));

var _LocalHistory = _interopRequireDefault(require("./LocalHistory"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const glob = _util.default.promisify(_glob.default);

class CommandWrapper {
  constructor(argv) {
    this.argv = argv;
    this.config = new _taskConfig.default();
    this.config.loadFromFileSync();
    this.reportReader = new _ReportReader.default(this.config);
  }
  /**
   * Processes the command
   */


  async process() {
    // load config
    await this.config.loadFromFile();

    if (!this.isJson()) {
      console.log('Starting newman...'); // eslint-disable-line no-console
    } // remove old reports


    const newmanReportsDir = _path.default.resolve(this.config.getProjectRoot(), 'newman');

    if (_fs.default.existsSync(newmanReportsDir)) {
      _fs.default.rmSync(newmanReportsDir, {
        recursive: true
      });
    } // run newman for each collection


    const collectionsGlob = _path.default.resolve(this.config.getProjectRoot(), 'collections/**/*.json');

    const collections = await glob(collectionsGlob);
    let exitCodePromise = Promise.resolve(0);
    collections.forEach(collection => {
      exitCodePromise = exitCodePromise.then(previousExitCode => this.runNewman(collection).then(newExitCode => {
        this.reportReader.readTestReport();
        return newExitCode > previousExitCode ? newExitCode : previousExitCode;
      }));
    });
    const exitCode = await exitCodePromise;

    if (this.isJson()) {
      console.log(JSON.stringify(this.reportReader.testRun.toJSON(), null, 2)); // eslint-disable-line no-console
    } else {
      const printer = new _testResultPrinter.default(this.reportReader.testRun);
      console.log(); // eslint-disable-line no-console

      printer.print({
        printFooter: true,
        printPoints: this.config.arePointsDisplayed()
      });
    }

    if (this.config.isLocalHistoryEnabled()) {
      (0, _LocalHistory.default)(this.config, this.reportReader.testRun);
    }

    process.exit(exitCode);
  }
  /**
   * Run newman
   */


  runNewman(collection) {
    return new Promise(resolve => {
      var _newman$stdout, _newman$stderr;

      // execute newman
      const newman = (0, _crossSpawn.default)('newman', this.buildNewmanArgs(collection), {
        cwd: this.config.getProjectRoot(),
        env: { ..._npmRunPath.default.env({
            env: process.env
          })
        }
      });
      newman.on('exit', code => resolve(code ?? 1));
      (_newman$stdout = newman.stdout) === null || _newman$stdout === void 0 ? void 0 : _newman$stdout.pipe(process.stdout);
      (_newman$stderr = newman.stderr) === null || _newman$stderr === void 0 ? void 0 : _newman$stderr.pipe(process.stderr);
    });
  }
  /**
   * Returns whether the output is json or not
   */


  isJson() {
    return this.argv.includes('--json');
  }
  /**
   * Builds arguments that will be passed to the newman command
   */


  buildNewmanArgs(collection) {
    var _this$config$getServe;

    const args = [...this.argv.filter(arg => arg !== '--json'), collection]; // add json reporter

    if (!args.includes('--reporters') && !args.includes('-r') && args.length > 0) {
      if (this.isJson()) {
        args.push('--reporters', 'json');
        args.push('--silent');
      } else {
        args.push('--reporters', 'cli,json');
      }
    } // add BASE_URL global var


    if ((_this$config$getServe = this.config.getServe()) !== null && _this$config$getServe !== void 0 && _this$config$getServe.bind) {
      let baseUrl = `http://${this.config.getServe().bind}`;

      if (this.config.getServe().port) {
        baseUrl = `${baseUrl}:${this.config.getServe().port}`;
      }

      args.push('--global-var', `BASE_URL=${baseUrl}`);
    } // add timeouts for good practice


    if (!args.includes('--timeout')) {
      args.push('--timeout', '60000');
    }

    if (!args.includes('--timeout-request')) {
      args.push('--timeout-request', '10000');
    }

    if (!args.includes('--timeout-script')) {
      args.push('--timeout-script', '10000');
    }

    return args;
  }

}

exports.default = CommandWrapper;
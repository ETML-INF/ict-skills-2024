"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ReportReader {
  consumedReports = [];

  constructor(config) {
    this.config = config;
    this.testRun = this.config.createTestRun();
  }

  readTestReport() {
    const files = this.orderRecentFiles();

    if (!files.length) {
      throw new Error('Could not find recent newman json report.');
    }

    const recentReport = _path.default.resolve(this.config.getProjectRoot(), 'newman', files[0].file);

    if (this.consumedReports.includes(recentReport)) {
      throw new Error('Most recent report has already been consumed. There should have be a more recent one.');
    }

    this.consumedReports.push(recentReport);
    const newmanReport = JSON.parse(String(_fs.default.readFileSync(recentReport)));
    this.record(newmanReport);
  }

  orderRecentFiles() {
    const dir = _path.default.resolve(this.config.getProjectRoot(), 'newman');

    if (!_fs.default.existsSync(dir)) {
      return [];
    }

    return _fs.default.readdirSync(dir).filter(file => _fs.default.lstatSync(_path.default.join(dir, file)).isFile()).map(file => ({
      file,
      mtime: _fs.default.lstatSync(_path.default.join(dir, file)).mtime
    })).sort((a, b) => b.mtime.getTime() - a.mtime.getTime());
  }

  record(newmanReport) {
    var _newmanReport$run, _newmanReport$run$exe;

    // build request id to name lookup map recursively
    const requests = ReportReader.buildRequestNames(newmanReport); // newman includes requests sent in pre-request scripts as an identical execution items,
    // which leads to duplicate requests. We extract tests first and deduplicating executions, and then record them.
    // extract tests

    const tests = {};
    newmanReport === null || newmanReport === void 0 ? void 0 : (_newmanReport$run = newmanReport.run) === null || _newmanReport$run === void 0 ? void 0 : (_newmanReport$run$exe = _newmanReport$run.executions) === null || _newmanReport$run$exe === void 0 ? void 0 : _newmanReport$run$exe.forEach(execution => {
      var _execution$assertions;

      (_execution$assertions = execution.assertions) === null || _execution$assertions === void 0 ? void 0 : _execution$assertions.forEach(assertion => {
        const testIdentifier = `${execution.item.id}-${assertion.assertion}`;

        if (tests[testIdentifier]) {
          if (assertion.error) {
            tests[testIdentifier].successful = false;
          }
        } else {
          tests[testIdentifier] = {
            fullName: `${requests[execution.item.id].fullName} > ${assertion.assertion}`,
            testName: `${requests[execution.item.id].testName} > ${assertion.assertion}`,
            extra: requests[execution.item.id].isExtra,
            successful: !assertion.error
          };
        }
      });
    }); // record test results

    Object.values(tests).forEach(test => {
      this.testRun.recordTest(test.fullName, test.testName, test.extra, test.successful);
    });
  }

  static buildRequestNames(newmanReport) {
    var _newmanReport$collect, _newmanReport$collect2, _newmanReport$collect3, _newmanReport$collect4, _newmanReport$collect5;

    const result = {};
    const isExtra = (_newmanReport$collect = newmanReport.collection) === null || _newmanReport$collect === void 0 ? void 0 : (_newmanReport$collect2 = _newmanReport$collect.info) === null || _newmanReport$collect2 === void 0 ? void 0 : (_newmanReport$collect3 = _newmanReport$collect2.name) === null || _newmanReport$collect3 === void 0 ? void 0 : _newmanReport$collect3.toLowerCase().endsWith('extra');

    function traverse(item, parentName) {
      const testName = item.name;
      const fullName = `${parentName} > ${testName}`;
      result[item.id] = {
        fullName,
        testName,
        isExtra
      };

      if (item.item) {
        item.item.forEach(child => traverse(child, fullName));
      }
    }

    (_newmanReport$collect4 = newmanReport.collection) === null || _newmanReport$collect4 === void 0 ? void 0 : (_newmanReport$collect5 = _newmanReport$collect4.item) === null || _newmanReport$collect5 === void 0 ? void 0 : _newmanReport$collect5.forEach(item => {
      var _newmanReport$collect6, _newmanReport$collect7;

      return traverse(item, (_newmanReport$collect6 = newmanReport.collection) === null || _newmanReport$collect6 === void 0 ? void 0 : (_newmanReport$collect7 = _newmanReport$collect6.info) === null || _newmanReport$collect7 === void 0 ? void 0 : _newmanReport$collect7.name);
    });
    return result;
  }

}

exports.default = ReportReader;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _crossSpawn = _interopRequireDefault(require("cross-spawn"));

var _npmRunPath = _interopRequireDefault(require("npm-run-path"));

var _taskConfig = _interopRequireDefault(require("@skills17/task-config"));

var _staticTaskServer = _interopRequireDefault(require("@skills17/static-task-server"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class CommandWrapper {
  constructor(argv) {
    this.argv = argv;
    this.config = new _taskConfig.default();
  }
  /**
   * Returns whether the output is json or not
   */


  isJson() {
    return this.argv.includes('--json');
  }
  /**
   * Returns whether the cypress output is supressed or not
   */


  isCypressQuiet() {
    return this.argv.includes('--quiet') || this.argv.includes('-q');
  }
  /**
   * Returns whether the current command is a help command or not
   */


  isHelpCommand() {
    return this.argv.includes('--help') || this.argv.includes('-h');
  }
  /**
   * Returns the timezone if one is specified.
   */


  getTimezone() {
    const timezoneIndex = this.argv.indexOf('--timezone');

    if (timezoneIndex < 0 || this.argv.length < timezoneIndex + 1) {
      return undefined;
    }

    return this.argv[timezoneIndex + 1];
  }
  /**
   * Builds arguments that will be passed to the cypress command
   */


  buildCypressArgs() {
    const args = [...this.argv.filter((arg, i) => {
      if (arg === '--json' || arg === '--timezone') {
        return false;
      }

      if (this.argv.includes('--timezone') && i === this.argv.indexOf('--timezone') + 1) {
        return false;
      }

      return true;
    })]; // set base url

    if (this.server && args.length > 0) {
      args.push('--config');
      args.push(`baseUrl=${this.server.getHost()}`);
    } // add custom reporter


    if (!args.includes('--reporter') && !args.includes('-r') && args.length > 0 && args[0].trim() !== 'open') {
      args.push('--reporter');
      args.push(_path.default.resolve(__dirname, 'Reporters', this.isJson() ? 'JsonReporter.js' : 'ConsoleReporter.js'));
    }

    return args;
  }
  /**
   * Run cypress
   */


  runCypress() {
    return new Promise(resolve => {
      var _cypress$stdout, _cypress$stderr;

      // execute cypress
      const cypress = (0, _crossSpawn.default)('cypress', this.buildCypressArgs(), {
        cwd: this.config.getProjectRoot(),
        env: {
          FORCE_COLOR: '1',
          CYPRESS_QUIET: this.isCypressQuiet() ? '1' : '0',
          CYPRESS_LOCAL_HISTORY: this.config.isLocalHistoryEnabled() ? '1' : '0',
          TZ: this.getTimezone(),
          ..._npmRunPath.default.env({
            env: process.env
          })
        }
      });
      cypress.on('exit', code => resolve(code ?? 1));
      (_cypress$stdout = cypress.stdout) === null || _cypress$stdout === void 0 ? void 0 : _cypress$stdout.pipe(process.stdout);
      (_cypress$stderr = cypress.stderr) === null || _cypress$stderr === void 0 ? void 0 : _cypress$stderr.pipe(process.stderr);
    });
  }
  /**
   * Processes the command
   */


  async process() {
    // load config
    await this.config.loadFromFile(); // start task server

    if (this.config.getServe().enabled && !this.isHelpCommand()) {
      this.server = new _staticTaskServer.default(this.config);
      await this.server.serve(false);
    }

    if (!this.isJson()) {
      console.log('Starting cypress...'); // eslint-disable-line no-console
    } // run cypress


    const exitCode = await this.runCypress();

    if (this.server) {
      await this.server.stop();
    }

    process.exit(exitCode);
  }

}

exports.default = CommandWrapper;
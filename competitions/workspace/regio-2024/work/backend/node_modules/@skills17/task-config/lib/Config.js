"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _testResult = require("@skills17/test-result");

class Config {
  source = ['./src/**'];
  tests = ['./tests/**/*.spec.*', './tests/**/*.test.*'];
  localHistory = false;
  displayPoints = true;
  serve = {
    enabled: false,
    port: 3000,
    bind: '127.0.0.1',
    mapping: {
      '/': './src'
    }
  };
  points = {
    defaultPoints: 1.0,
    strategy: _testResult.Strategy.Add
  };
  groups = [];
  metadata = {};
  /**
   * Load groups from the config.yaml file and create instances of @skills17/test-result
   *
   * @param groups Groups
   */

  loadGroups(groups) {
    return groups.map((groupConfig, groupIndex) => {
      if (!groupConfig.match) {
        throw new Error(`config.yaml validation error: group #${groupIndex} does not contain a 'match' property`);
      }

      const defaultPoints = typeof groupConfig.defaultPoints !== 'undefined' ? groupConfig.defaultPoints : this.points.defaultPoints;
      const strategy = typeof groupConfig.strategy !== 'undefined' ? groupConfig.strategy : this.points.strategy;

      if (typeof groupConfig.maxPoints !== 'undefined' && strategy !== _testResult.Strategy.Deduct) {
        throw new Error(`config.yaml validation error: property 'maxPoints' can only be set for strategy 'deduct'. Found in group #${groupIndex} (${groupConfig.match})`);
      } // create group instance


      const group = new _testResult.Group(groupConfig.match, defaultPoints, strategy, groupConfig.displayName, groupConfig.maxPoints); // add test overrides

      if (groupConfig.tests && Array.isArray(groupConfig.tests)) {
        groupConfig.tests.forEach((testConfig, testIndex) => {
          if (!testConfig.match) {
            throw new Error(`config.yaml validation error: test #${testIndex} in group #${groupIndex} (${groupConfig.match}) does not contain a 'match' property`);
          }

          group.addOverride(new _testResult.Override(testConfig.match, testConfig.required, testConfig.points));
        });
      }

      return group;
    });
  }
  /**
   * Initialize the class with values from the config file
   *
   * @param config Config object
   */


  load(config) {
    // eslint-disable-line
    // set config
    this.id = config.id;
    this.source = config.source ?? this.source;
    this.tests = config.tests ?? this.tests;
    this.localHistory = config.localHistory ?? this.localHistory;
    this.displayPoints = config.displayPoints ?? this.displayPoints;
    this.serve = { ...this.serve,
      ...config.serve
    };
    this.points = { ...this.points,
      ...config.points
    };
    this.groups = config.groups ?? this.groups;
    this.metadata = config.metadata ?? this.metadata;
  }
  /**
   * Create a new test run instance from @skills17/test-result for the current config
   */


  createTestRun() {
    const run = new _testResult.TestRun();
    this.loadGroups(this.groups).forEach(group => run.addGroup(group));
    return run;
  }

  getId() {
    return this.id;
  }

  getSource() {
    return this.source;
  }

  getTests() {
    return this.tests;
  }

  getServe() {
    return this.serve;
  }

  getPoints() {
    return this.points;
  }

  getGroups() {
    return this.groups;
  }

  getMetadata() {
    return this.metadata;
  }

  isLocalHistoryEnabled() {
    return this.localHistory;
  }

  arePointsDisplayed() {
    return this.displayPoints;
  }

}

exports.default = Config;